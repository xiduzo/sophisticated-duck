import { ChatMessage } from "chatgpt";
import Head from "next/head";
import { useCallback, useEffect, useRef, useState } from "react";
import { useForm, type SubmitHandler } from "react-hook-form";

import { api } from "~/utils/api";
import Markdown from "react-markdown";
import remarkGfm from "remark-gfm";
import Prism from "prismjs";

import { PaperAirplaneIcon } from "@heroicons/react/24/solid";

export default function Home() {
  const { mutateAsync, isLoading } = api.example.askQuestion.useMutation();

  const [conversation, setConversation] = useState<ChatMessage[]>([]);
  const conversationId = useRef(crypto.randomUUID());
  const conversationRef = useRef<HTMLDivElement>(null);
  const submitRef = useRef<HTMLButtonElement>(null);

  const { register, handleSubmit, reset, setValue, watch, setFocus } =
    useForm<ChatMessage>();

  const hasInput = watch("text");

  const scrollToBottom = useCallback(() => {
    setTimeout(() => {
      conversationRef.current?.scrollTo({
        top: conversationRef.current.scrollHeight + 150,
        behavior: "smooth",
      });
    }, 150);
  }, []);

  const onSubmit: SubmitHandler<ChatMessage> = useCallback(
    async (data) => {
      console.log("Sending", { data });
      setConversation((prev) => [...prev, data]);
      reset();
      scrollToBottom();

      const response = await mutateAsync(data);
      console.log("Received", { response });

      setValue("parentMessageId", response.id);
      setConversation((prev) => [...prev, response]);

      scrollToBottom();
    },
    [reset, mutateAsync, setConversation, scrollToBottom],
  );

  useEffect(() => {
    Prism.highlightAll();
  }, [conversation]);

  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === "Enter" && !event.shiftKey) {
        event.preventDefault();
        submitRef.current?.click();
      }
    };
    window.addEventListener("keydown", handleKeyDown);

    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, []);

  useEffect(() => {
    setFocus("text");
  }, [setFocus]);

  return (
    <>
      <Head>
        <title>Sophisticated duck</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen">
        <aside className="z-10 h-screen w-64 bg-neutral-800 text-gray-500 shadow-md">
          {"// TODO: Add sidebar"}
        </aside>
        <article className="flex grow justify-center text-white">
          <div
            className="flex h-screen grow flex-col divide-y divide-zinc-800/60 overflow-y-scroll bg-zinc-700 pb-52"
            id="conversation"
            ref={conversationRef}
          >
            {conversation.length === 0 && (
              <div className="flex h-screen w-full flex-col items-center justify-center space-y-8">
                <span className="text-9xl">ðŸ¦†</span>
                <span className="opacity-50">
                  Quack quack quack, how can I help you?
                </span>
              </div>
            )}
            {conversation.map((message, index) => (
              <div
                key={message.id}
                className={`flex w-full justify-center py-5 ${
                  index % 2 === 0 ? "bg-zinc-700" : "bg-zinc-600"
                }`}
              >
                <div className="flex max-w-3xl grow space-x-3">
                  <div className="text-3xl">
                    {message.role === "user" ? "ðŸ‘¤" : "ðŸ¦†"}
                  </div>
                  <div id="markdown" className="grow overflow-x-scroll">
                    <Markdown remarkPlugins={[remarkGfm]}>
                      {message.text}
                    </Markdown>
                  </div>
                </div>
              </div>
            ))}
          </div>

          <div className="absolute bottom-0 left-0 h-36 w-full bg-gradient-to-t from-zinc-700 to-[#00000000]"></div>
          <section className="absolute bottom-12 w-full max-w-3xl">
            <form
              onSubmit={handleSubmit(onSubmit)}
              className="z-10 flex space-x-4"
            >
              <fieldset>
                <input {...register("parentMessageId")} className="hidden" />
                <input
                  {...register("conversationId")}
                  value={conversationId.current}
                  className="hidden"
                />
                <input
                  {...register("id")}
                  value={crypto.randomUUID()}
                  className="hidden"
                />
                <input {...register("role")} value="user" className="hidden" />
              </fieldset>
              <fieldset className="flex grow space-x-6">
                <textarea
                  autoFocus
                  placeholder="How do I do a for loop again?"
                  tabIndex={0}
                  {...register("text")}
                  className="grow rounded-xl bg-gray-500 p-3 pr-16 shadow-md"
                />
                <button
                  ref={submitRef}
                  disabled={isLoading || !hasInput}
                  className="absolute bottom-2 right-2 rounded-xl bg-green-500 p-2 transition-all duration-150 disabled:bg-gray-500"
                >
                  <PaperAirplaneIcon className="h-4 w-4" />
                </button>
              </fieldset>
            </form>
          </section>
        </article>
      </main>
    </>
  );
}
